@use "@scss/class/mixins.scss" as m;
@use "@scss/lib/ps-cursor.scss" as *;

//
@property --value  { syntax: "<number>"; initial-value: 0; inherits: true; };
@property --relate { syntax: "<number>"; initial-value: 0; inherits: true; };
@property --drag-x { syntax: "<number>"; initial-value: 0; inherits: true; };
@property --drag-y { syntax: "<number>"; initial-value: 0; inherits: true; };

//
@property --order { syntax: "<integer>"; initial-value: 1; inherits: true; };
@property --content-inline-size { syntax: "<length-percentage>"; initial-value: 100%; inherits: true; };
@property --content-block-size  { syntax: "<length-percentage>"; initial-value: 100%; inherits: true; };

//
@layer ux-classes {
    //
    .grid-rows > *, :host(.grid-rows) > ::slotted(*) { @include m.grid-row; }
    .grid-rows, :host(.grid-rows) {
        @include m.grid-flow(column);
        @include m.place();

        //
        & {
            grid-auto-rows: minmax(0px, max-content);
            grid-template-columns: minmax(0px, max-content) minmax(0px, 1fr)  minmax(0px, max-content);
            margin: 0px;
            padding: 0px;
            list-style-type: none;
            list-style-position: inside;
        }

        //
        & { @include m.size(max-content, max-content); }
    }

    //
    .grid-columns > *, :host(.grid-columns) > ::slotted(*) { @include m.grid-column; }
    .grid-columns, :host(.grid-columns) {
        @include m.grid-flow(row);
        @include m.place();

        //
        & {
            grid-auto-columns: minmax(0px, 1fr);
            grid-template-rows: minmax(0px, 1fr);
            margin: 0px;
            padding: 0px;
            list-style-type: none;
            list-style-position: inside;
        }
    }

    //
    .flex-columns > *, :host(.flex-columns) > ::slotted(*) { @include m.flex-column; }
    .flex-columns, :host(.flex-columns) {
        @include m.flex-flow(row);
        @include m.place();
    }

    //
    .grid-layered, :host(.grid-layered) {
        & {
            grid-template-columns: minmax(0px, 1fr);
            grid-template-rows: minmax(0px, 1fr);
        }

        //
        & {
            @include m.display();
            @include m.size(max-content, max-content);
        }
    }

    //
    .grid-layered > *, :host(.grid-layered) > ::slotted(*) {
        --order: m.sibling-index();

        //
        order: var(--order, auto);
        z-index: var(--order, 0);
        grid-column: 1 / -1;
        grid-row   : 1 / -1;

        //
        @include m.size(auto, auto);
    }

    //
    .grid-rows-3c, :host(.grid-rows-3c) { // hovewer, would be 'grid-columns-count' variable...
        grid-template-columns: minmax(0px, max-content) minmax(0px, 1fr) minmax(0px, max-content);
    }

    //
    .grid-rows-3c > *:last-child, :host(.grid-rows-3c) > ::slotted(*:last-child) { grid-column: var(--order, 1) / 3 span; }
    .grid-rows-3c > *, :host(.grid-rows-3c) > ::slotted(*) {
        --order: m.sibling-index();
        grid-column: var(--order, 1) / var(--order, 1) span;

        //
        @include m.size(auto, auto);
    }

    //
    .stretch-inline {
        inline-size: 100%;
        inline-size: -webkit-fill-available;
        inline-size: stretch;
    }

    //
    .stretch-block {
        block-size: 100%;
        block-size: -webkit-fill-available;
        block-size: stretch;
    }

    // requires `box-sizing: border-box`
    .content-inline-size {
        padding-inline: limit-by-size(calc(var(--content-inline-size, 100%) * 0.5), 100%);
    }

    // requires `box-sizing: border-box`
    .content-block-size {
        padding-block: limit-by-size(calc(var(--content-block-size, 100%) * 0.5), 100%);
    }

    //
    .round-decor {
        & {
            padding-block: 0.25rem;
            border-radius: 0.25rem;
            box-shadow: 0px 0px 0.5rem var(--color-border, #00000040);
            overflow: hidden;
        }

        //
        &:empty {
            padding: 0px;
            display: none;
            pointer-events: none;
            visibility: collapse;
        }
    }

    //
    .ux-anchor {
        transform: scale(var(--scale, 1)) translate(var(--translate-x, 0px), var(--translate-y, 0px));
        @include ps-cursor;
    }
}
