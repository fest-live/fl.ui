@property --order { syntax: "<integer>"; initial-value: 1; inherits: true; };
@property --content-inline-size { syntax: "<length-percentage>"; initial-value: 100%; inherits: true; };
@property --content-block-size  { syntax: "<length-percentage>"; initial-value: 100%; inherits: true; };

//
@mixin place($method: stretch) {
    place-content: $method;
    place-items: center;
}

//
@mixin grid-flow ($direction: row) {
    display: grid;
    grid-auto-flow: $direction;
}

//
@mixin flex-flow ($direction: row) {
    display: flex;
    flex-direction: $direction;
}

//
@mixin grid-column {
    @include grid-flow(column);
    @include place(center);

    & {
        --order: sibling-index();
        grid-column: var(--order, 1) / var(--order, 1) span; grid-row: 1 / -1;
        grid-template-columns: minmax(0px, 1fr); grid-template-rows: subgrid;
    }
}

//
@mixin grid-row {
    @include grid-flow(row);
    @include place(center);

    & {
        --order: sibling-index();
        grid-column: 1 / -1; grid-row: var(--order, 1) / var(--order, 1) span;
        grid-template-columns: subgrid; grid-template-rows: minmax(0px, max-content);
    }
}

//
@mixin flex-column {
    --order: sibling-index();
    order: var(--order, auto);
    flex: 1 1 max-content;

    //
    @include place(center);
}

// used with padding
@function limit-by-size($pwidth, $basis: 100%, $min: 0px) {
    @return max(calc($basis - ($basis - $pwidth)), $min);
}

//
@mixin round-corner($radius: 1rem) {
    clip-path: inset(0px 0px round #{$radius});
}

// it's old version, needs better shape version!
@mixin wavy-shaped($detail: 100) {
    --clip-amplitude: 0.05;
    --clip-freq: 8;
    --clip-path: #{wavy.Integrate("WavyFx", $detail)};
    --icon-size: 100%;
    --corrector: 1.1;
}

//
@layer ux-classes {
    //
    .grid-rows {
        @include grid-flow(row);
        @include place();

        //
        & {
            grid-auto-rows: minmax(0px, max-content);
            grid-template-columns: minmax(0px, 1fr);
            block-size: max-content;
        }

        //
        & > * { @include grid-row; }
    }

    //
    .grid-columns {
        @include grid-flow(column);
        @include place();

        //
        & {
            grid-auto-columns: minmax(0px, 1fr);
            grid-template-rows: minmax(0px, 1fr);
        }

        //
        & > * { @include grid-column; }
    }

    //
    .flex-columns {
        @include flex-flow(row);
        @include place();

        //
        & > * { @include flex-column; }
    }

    //
    .grid-layered {
        display: grid;
        grid-template-columns: minmax(0px, 1fr);
        grid-template-rows: minmax(0px, 1fr);
        inline-size: max-content;
        block-size : max-content;

        //
        & > * {
            --order: sibling-index();

            //
            order: var(--order, auto);
            z-index: var(--order, 0);
            grid-column: 1 / -1;
            grid-row   : 1 / -1;
            inline-size: auto;
            block-size : auto;
        }
    }

    //
    .grid-rows-3c { // hovewer, would be 'grid-columns-count' variable...
        grid-template-columns: minmax(0px, max-content) minmax(0px, 1fr) minmax(0px, max-content);

        //
        & > * {
            // would be say in very hard native CSS combinatoric:
            // if var(--order, 1) == sibling-count() ? 3 : var(--order, 1)
            & > * { --order: sibling-index(); grid-column: var(--order, 1) / var(--order, 1) span; }
            & > *:last-child { grid-column: var(--order, 1) / 3 span; }
        }
    }

    //
    .stretch-inline {
        inline-size: 100%;
        inline-size: -webkit-fill-available;
        inline-size: stretch;
    }

    //
    .stretch-block {
        block-size: 100%;
        block-size: -webkit-fill-available;
        block-size: stretch;
    }

    // requires `box-sizing: border-box`
    .content-inline-size {
        padding-inline: limit-by-size(calc(var(--content-inline-size, 100%) * 0.5), 100%);
    }

    // requires `box-sizing: border-box`
    .content-block-size {
        padding-block: limit-by-size(calc(var(--content-block-size, 100%) * 0.5), 100%);
    }

    //
    .time-format {
        font-size: 1em;
        font-optical-sizing: auto;
        font-variant-numeric: tabular-nums;
        font-weight: 500;
        font-kerning: auto;
        font-family: 'Fira Mono', 'Menlo', 'Consolas', monospace;
        display: inline flex;
        text-align: center;
        place-content: center;
        place-items: center;
        flex-direction: row;
        white-space: nowrap;
        text-overflow: ellipsis;
        text-overflow: "";
        font-stretch: condensed;
        font-width: condensed;
        inline-size: max-content;
        letter-spacing: -0.05em;
    }
}
