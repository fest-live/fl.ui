@use "sass:math";
@use "sass:list";
@use "sass:meta";

//
@use '@sass-fairy/list' as fl;

// if you don't want to use deps...
@function join($list, $glue: '', $is-nested: false) {
    $result: null;
    @for $i from 1 through length($list) {
        $e: nth($list, $i);
        @if type-of($e) == list {
            $result: $result#{join($e, $glue, true)};
        } @else {
            $result: if(
                $i != length($list) or $is-nested,
                $result#{$e}#{$glue},
                $result#{$e}
            );
        }
    }
    @return $result;
};

// F(X):[x,y] where X:[0..1]
@#{"function --wavy-step(--step <number>)"} {
    $step: var(--step, 0);
    $angle: calc(($step * 2) * 1rad * #{"pi"});
    $variant: calc(cos(var(--clip-freq, 8) * #{$angle}) * 0.5 + 0.5);
    $adjust: calc($variant * var(--clip-amplitude, 0));
    $x: calc((cos(#{$angle}) * (0.5 - #{$adjust})) * var(--icon-size, 100%));
    $y: calc((sin(#{$angle}) * (0.5 - #{$adjust})) * var(--icon-size, 100%));
    //$ox: 50%;//calc(0.5 * var(--icon-size, 100%));
    //$oy: 50%;//calc(0.5 * var(--icon-size, 100%));
    result: #{$x} #{$y};
}

// F(X):[x,y] where X:[0..1]
@function WavyFx($step: 0) {
/*
    $angle: calc(($step * 2) * 1rad * #{"pi"});
    $variant: calc(cos(var(--clip-freq, 8) * #{$angle}) * 0.5 + 0.5);
    $adjust: calc($variant * var(--clip-amplitude, 0));
    $x: calc((0.5 + (cos(#{$angle}) * (0.5 - #{$adjust}))) * var(--icon-size, 100%));
    $y: calc((0.5 + (sin(#{$angle}) * (0.5 - #{$adjust}))) * var(--icon-size, 100%));
    @if $step == 0 {
        @return "from #{$x} #{$y}";
    } @else {
        @return "smooth to #{$x} #{$y}";
    }
*/
    @if $step == 0
        { @return "move --wavy-step(#{$step})"; } @else
        { @return "smooth to --wavy-step(#{$step})"; }
}

// space cadet or cheater-tale
@function Integrate($name, $steps: 100) {
    $fx: meta.get-function($name);
    $ox: 50%;//calc(0.5 * var(--icon-size, 100%));
    $oy: 50%;//calc(0.5 * var(--icon-size, 100%));
    $points: ();
    @for $i from 1 through $steps { $points: list.append($points, meta.call($fx, math.div($i, $steps))); }
    @return shape(from #{$ox} #{$oy}, #{fl.join($points, ", ")});
}
