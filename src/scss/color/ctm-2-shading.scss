@use "sass:list";

/* Define property color */
@mixin property-color($name, $initial: #fff, $syntax: "<color>", $inherits: true) {
    @property --#{$name} { syntax: "#{$syntax}"; inherits: #{$inherits}; initial-value: #{$initial}; };
}

/* Define property value */
@mixin property-value($name, $initial: 0, $syntax: "<number>", $inherits: true) {
    @property --#{$name} { syntax: "#{$syntax}"; inherits: #{$inherits}; initial-value: #{$initial}; };
}

/* */
@property --if-theme-hack { syntax: "<color>"; inherits: true; initial-value: #000; };

/* Detect theme */
@mixin detected-theme($name: "detected") {
    & { --#{$name}-theme: 0; };
    & * { --#{$name}-theme: inherit; }

    //
    @media (prefers-color-scheme: light) { --#{$name}-theme: 0; };
    @media (prefers-color-scheme: dark)  { --#{$name}-theme: 1; };

    //
    @container(#{"style(color-scheme: light) or style(color-scheme: only light)"}) { --#{$name}-theme: 0; };
    @container(#{"style(color-scheme: dark)  or style(color-scheme: only dark)"})  { --#{$name}-theme: 1; };

    //
    & {--if-theme-hack: light-dark(#111, #000); };

    //
    &, & * {
        --#{$name}-theme: if(
            style(--if-theme-hack: #000): 1;
            style(color-scheme: dark): 1;
            style(color-scheme: only dark): 1;
            else: 0;
        );
    };
}


/*********************/
/* TONE COEF VALUES */
/*********************/

/* Tone names */
$tone-names:
    "surface", "on-surface",
    "contrast", "on-contrast",
    "inverse", "on-inverse",
    "accent", "on-accent";
$tone-values:
    0.04, 0.96,
    0.02, 0.98,
    0.9, 0.2,
    0.4, 0.6;
$tone-values-count: list.length($tone-values);
$tone-values-index: 0;

/* Define property tone values */
@mixin property-tone-values($tone-name) {
    @include property-value("#{$tone-name}-tone", 0);
    @include property-value("#{$tone-name}-tone-shift", 0);
    @include property-value("#{$tone-name}-choice-factor", 0);
    @include property-value("#{$tone-name}-tm", 0);
}

/* Generate property tones */
@mixin property-tones() {
    @each $tone-name in $tone-names {
        @include property-tone-values($tone-name);
    }
}

/* Generate property tone derivatives */
@mixin property-tone-derivatives($primary-name, $tone-name) {
    @include property-color("#{$primary-name}-#{$tone-name}", #fefffe);
    @include property-color("#{$primary-name}-#{$tone-name}-tm", #fefffe);
    @include property-color("#{$primary-name}-#{$tone-name}-from-light-to-accent", #fefffe);
    @include property-color("#{$primary-name}-#{$tone-name}-from-accent-to-dark", #fefffe);
}

/* Generate property themed */
@mixin property-themed($primary-name) {
    @include property-color("#{$primary-name}-lighter", #fefffe);
    @include property-color("#{$primary-name}-darker", #101110);
    @include property-color("#{$primary-name}-neutral", #fefffe);
    @include property-color("#{$primary-name}-accent", #101110);

    /* Generate property light shade */
    @include property-color("#{$primary-name}-light-shade", #fefffe);
    @include property-color("#{$primary-name}-dark-shade", #101110);
    @include property-color("#{$primary-name}-accent-shade", #101110);

    /* Generate property tone derivatives */
    @each $tone-name in $tone-names {
        @include property-tone-derivatives($primary-name, $tone-name);
    }
}



/****************************/
/* SHADING EDGES GENERATION */
/****************************/

/* Generate accent shades */
@mixin accent-shades($primary: "primary") {
    & {
        --#{$primary}-lighter: oklch(from var(--#{$primary}, #fefffe) calc(l * 0.6 + 0.4) calc(c * 0.9 + 0.1) h);
        --#{$primary}-darker:  oklch(from var(--#{$primary}, #101110) calc(l * 0.6 + 0.1) calc(c * 0.9 + 0.1) h);
        --#{$primary}-neutral: oklch(from var(--#{$primary}, #fefffe) calc(l * 0.4 + 0.4) calc(c * 0.6 + 0.1) h); /* neutral unused*/
    }
}

/* Generate theme accents */
@mixin theme-accents($ld-color-name, $dep-name: "detected") {
    & { /* there should been `@supports` */ /* TODO: color-mix may be not correct... */
        --#{$ld-color-name}-tm: color-mix(
            in oklch,
            var(--#{$ld-color-name}-lighter, #fefffe) calc((1 - var(--#{$ld-color-name}-theme, 0)) * 100%),
            var(--#{$ld-color-name}-darker, #101110) calc(var(--#{$ld-color-name}-theme, 0) * 100%)
        );
        --#{$ld-color-name}-tm: light-dark(var(--#{$ld-color-name}-lighter, #fefffe), var(--#{$ld-color-name}-darker, #101110));
        --#{$ld-color-name}-theme: var(--#{$dep-name}-theme, 0); /* light */
    }
}



/*************/
/* TONE COEF */
/*************/

/* theme shading determination in [0 to 1] */
@mixin theme-affect($basis-tone: "surface", $when-light, $when-dark) {
    //$when-light: "calc(1.0 - var(--#{$basis-tone}-tone, 0.5) * 0.3)";
    //$when-dark: "calc(0.1 + var(--#{$basis-tone}-tone, 0.5) * 0.6)";

    & { --#{$basis-tone}-dep: calc(#{$when-light} * (1 - var(--detected-theme, 0)) + #{$when-dark} * var(--detected-theme, 0)); };
}

/* Generate theme affect */
@mixin theme-affect-default($basis-tone: "surface") {
    @include theme-affect($basis-tone,
        "calc(1.0 - var(--#{$basis-tone}-tone, 0.0) * 0.9)",
        "calc(0.1 + var(--#{$basis-tone}-tone, 0.5) * 0.9)");
}

/* Mix colors */
@function mix($a, $b, $c) {
    @return calc(#{$a} * #{$c} + #{$b} * (1 - #{$c}) );
}

/* Generate tone shifting */
@mixin tone-shifting($affected: "surface", $shift: "surface-tone-shift") {
    & {
        /* 0.2 - power of shift affection */
        /* 0.9 - tone correction factor */
        --#{$affected}-dep-shift: clamp(0, calc( var(--#{$affected}-dep, 0) * 0.99 + calc(var(--#{$shift}, 0) * #{mix(1, -1, 'var(--detected-theme, 0)')}) * 0.6 ), 1);

        /* if > 0.5, try first variant, if <= 0.5, try secondary */
        /* if (d - 0.5) less than 0, rounds up to 0 (lights), more than 0, rounds up to 1 (darker) */
        --#{$affected}-choice-factor: clamp(0, round(up, calc(var(--#{$affected}-dep-shift, 0) - 0.5), 1), 1);
        //--#{$affected}-choice-factor: clamp(0, calc(var(--#{$affected}-dep-shift, 0) - 0.5), 1);
    };
}



/*********************/
/* GENERATION SYSTEM */
/*********************/

/* Generate toned */
@mixin generate-toned($tone-names, $index: 1) {
    $tone-name: list.nth($tone-names, $index);
    $initial-value: list.nth($tone-values, $index);
    //$tone-light-theme-affect: list.nth($tone-light-theme-affect, $index);
    //$tone-dark-theme-affect: list.nth($tone-dark-theme-affect, $index);

    /* initial (default) value */
    & {
        --#{$tone-name}-tone: #{$initial-value};
        --#{$tone-name}-tone-shift: 0.0;
    }

    /* tone values */
    //@include theme-affect($tone-name, $tone-light-theme-affect, $tone-dark-theme-affect);
    @include theme-affect-default($tone-name);
    @include tone-shifting($tone-name, "#{$tone-name}-tone-shift");
}



/**************/
/* USING TONE */
/**************/

/* Generate sub-shades */
@mixin sub-shades($primary: "primary", $suffix: "-tm") { /* dark shades from 0 as light to 1 as dark... */
    & {
        --#{$primary}-light-shade:  oklch(from var(--#{$primary}#{$suffix}, #fefffe) calc(l * 0.06 + 0.94) calc(c * 0.01) h);
        --#{$primary}-dark-shade:   oklch(from var(--#{$primary}#{$suffix}, #101110) calc(l * 0.02 + 0.01) calc(c * 0.01) h);
        --#{$primary}-accent-shade: var(--#{$primary}#{$suffix}, #101110); // oklch(from var(--#{$primary}#{$suffix}, #101110) calc(l * 0.5 + 0.4) calc(c * 0.9 + 0.1) h);
    }
}

/* Apply shade */
@mixin apply-shade($subset: "surface", $primary: "primary", $dep-name: "dep-shift") {
    $dep-named: '#{$subset}-#{$dep-name}';

    & {
        /* if 0 to 0.5 */
        --#{$primary}-#{$subset}-from-light-to-accent: color-mix(in oklch, var(--#{$primary}-light-shade) calc(clamp(0, (var(--#{$subset}-#{$dep-name}, 0) - 0.5) * 2, 1) * 100%), var(--#{$primary}-accent-shade));

        /* if 0.5 to 1*/
        --#{$primary}-#{$subset}-from-accent-to-dark: color-mix(in oklch, var(--#{$primary}-accent-shade) calc(clamp(0, (var(--#{$subset}-#{$dep-name}, 0) - 0) * 2, 1) * 100%), var(--#{$primary}-dark-shade));

        /* resolve color, determinated by dependency */
        --#{$primary}-#{$subset}: color-mix(in oklch, var(--#{$primary}-#{$subset}-from-light-to-accent) calc(var(--#{$subset}-choice-factor) * 100%), var(--#{$primary}-#{$subset}-from-accent-to-dark));
    }
}

/* Generate themed nodes */
@mixin generate-themed-nodes($primary: "primary") {
    @include accent-shades($primary); /* make different version of chromatic center */
    @include theme-accents($primary); /* determine chromatic base by theme */
    @include sub-shades($primary);    /* generate shadings from light or dark */

    /* use final tone value for shading primary */
    @each $tone-name in $tone-names {
        @include apply-shade($tone-name, $primary, 'dep-shift');
    }
}

/* Generate toned nodes */
@mixin generate-toned-nodes() {
    $tone-values-index: 1;
    @each $tone-name in $tone-names {
        @include generate-toned($tone-names, $tone-values-index);
        $tone-values-index: $tone-values-index + 1;
    }
}
